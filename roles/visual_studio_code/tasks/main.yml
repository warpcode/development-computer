---
- name: Include OS-specific variables
  ignore_errors: true
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}/main.yml"
  loop_control:
    loop_var: item

- name: Install vscode repository (apt)
  become: true
  register: _visual_studio_code_state
  ansible.builtin.deb822_repository:
    name: "{{ _visual_studio_code_apt_repo_name }}"
    types: deb
    uris: "{{ _visual_studio_code_apt_repo_url }}"
    suites: "{{ _visual_studio_code_apt_repo_suites }}"
    components: "{{ _visual_studio_code_apt_repo_components }}"
    signed_by: "{{ _visual_studio_code_apt_repo_signed_by }}"
  when:
    - _visual_studio_code_apt_repo_name is defined
    - ansible_pkg_mgr == 'apt'

- name: Install vscode repository (dnf/yum)
  become: true
  ansible.builtin.yum_repository:
    baseurl: "{{ _visual_studio_code_yum_repo_baseurl }}"
    gpgkey: "{{ _visual_studio_code_yum_repo_gpg_key }}"
    gpgcheck: true
    name: "{{ _visual_studio_code_yum_repo_name }}"
    description: "{{ [_visual_studio_code_yum_repo_name, 'repository'] | join(' ') }}"
    enabled: true
  when:
    - _visual_studio_code_yum_repo_gpg_key is defined
    - ansible_pkg_mgr is regex("dnf5?") or ansible_pkg_mgr == 'yum'

- name: Update package manager cache (apt)
  become: true
  ansible.builtin.package:
    update_cache: true
  when:
    - ansible_pkg_mgr == 'apt'
    - _visual_studio_code_state is defined and _visual_studio_code_state is changed

- name: Install (Linux)
  become: true
  ansible.builtin.package:
    name: "{{ _visual_studio_code_packages }}"
  when:
    - ansible_system == "Linux"

- name: Install (MacOs)
  community.general.homebrew_cask:
    name: "{{ _visual_studio_code_packages }}"
  when:
    - ansible_system == "Darwin"

- name: Install (Windows)
  become: true
  chocolatey.chocolatey.win_chocolatey:
    name: "{{ _visual_studio_code_packages }}"
  when:
    - ansible_system == "Win32NT"

- name: Install extensions
  changed_when: "'successfully installed' in  _visual_studio_code_extensions_output.stdout"
  ansible.builtin.command:
    argv:
      - code
      - --install-extension
      - "{{ extension  }}"
  when:
    - ansible_user_id != 'root'
  register: _visual_studio_code_extensions_output
  loop: "{{ visual_studio_code_extensions }}"
  loop_control:
    loop_var: extension
